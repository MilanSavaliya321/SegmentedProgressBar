// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SGSegmentedProgressBar
import Foundation
@_exported import SGSegmentedProgressBar
import Swift
import UIKit
@objc @_hasMissingDesignatedInitializers final public class SGSegmentedProgressBar : UIKit.UIView {
  final public var isPaused: Swift.Bool {
    get
  }
  final public var currentIndex: Swift.Int {
    get
  }
  public init(frame: CoreGraphics.CGRect, delegate: SGSegmentedProgressBar.SGSegmentedProgressBarDelegate, dataSource: SGSegmentedProgressBar.SGSegmentedProgressBarDataSource)
  final public func start()
  final public func pause()
  final public func resume()
  final public func nextSegment()
  final public func previousSegment()
  final public func restart()
  final public func reset()
  final public func restartCurrentSegment()
  final public func setProgressManually(index: Swift.Int, progressPercentage: CoreGraphics.CGFloat)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol SGSegmentedProgressBarDelegate : AnyObject {
  func segmentedProgressBarFinished(finishedIndex: Swift.Int, isLastIndex: Swift.Bool)
}
public protocol SGSegmentedProgressBarDataSource : AnyObject {
  var numberOfSegments: Swift.Int { get }
  var segmentDuration: Foundation.TimeInterval { get }
  var paddingBetweenSegments: CoreGraphics.CGFloat { get }
  var trackColor: UIKit.UIColor { get }
  var progressColor: UIKit.UIColor { get }
  var roundCornerType: SGSegmentedProgressBar.SGCornerType { get }
}
public enum SGCornerType {
  case roundCornerSegments(cornerRadious: CoreGraphics.CGFloat)
  case roundCornerBar(cornerRadious: CoreGraphics.CGFloat)
  case none
}
